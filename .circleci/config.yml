# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  print_pipeline_id:
    parameters:
      to:
        type: string
        default: $CIRCLE_WORKFLOW_ID
    steps:
      - run: echo parameters.to


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:  echo hello

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
<<<<<<< HEAD
      - run:  echo world 

  print_pipeline_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
=======
      - run:  echo world 
  Print_variable:    
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $MY_NMAE
            
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:  echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
             - output.txt
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
      
    
    steps:
      - attach_workspace:
          at: ~/
      - run:  cat ~/output.txt  
        
>>>>>>> 2901d395aece72248dfa1be86a05c84eb18ac980
    

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - print_hello
<<<<<<< HEAD
      - print_world
           requires
             - print_hello

=======
      - print_world:
          requires:
            - print_hello 
      - Print_variable
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
>>>>>>> 2901d395aece72248dfa1be86a05c84eb18ac980
