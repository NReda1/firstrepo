# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs
commands:
  print_pipeline_id:
    steps:
      
      - run: echo ${CIRCLE_WORKFLOW_ID}
      
  destroy_environment:
    
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}



# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:  echo hello

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:  echo world  

  print_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  Job_Failures:
    docker:
      - image: circleci/node:13.8.0
    steps:
      
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail
          
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
             URL="https://blog.udacity.com/"
             # Test if website exists
             if curl -s --head ${URL} 
             then
               return 0
             else
               return 1
             fi  
   
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
             aws cloudformation deploy \
               --template-file template.yml \
               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
               --region us-east-1  
               
  smoke_test2:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment             

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - print_hello
      - print_world:
           requires:
             - print_hello
      - print_id
      - Job_Failures
      - smoke_test
      - create_infrastructure
      - smoke_test2

